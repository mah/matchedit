#!/usr/bin/perl
# TODO option to read file names from STDIN
# TODO options to control generation of backups
# TODO -S, --suffix=SUFFIX override the usual backup suffix ?
# TODO guard against mis-escaped lines
# TODO check the meta data signature...
# TODO guard against same file being specified multiple times
use warnings;
use strict;
use File::Temp qw(tempfile);
use Getopt::Long;
use Pod::Usage;

my %options = (
    context => 2,
    editor => $ENV{EDITOR} || 'vim',
);
GetOptions(\%options, qw( context|C=i editor=s help|h|? )) or pod2usage(2);
pod2usage(1) if $options{help};
pod2usage "?Argument to --context must not be negative." if $options{context} < 0;
my $re = shift @ARGV or pod2usage "?Missing regular expression.";
$re = qr/$re/o; # TODO right thing?
@ARGV = grep { !m/\n/ or warn "!ignoring file `$_' with newline(s) in its name.\n" and 0 } @ARGV;
pod2usage "?Missing file names." unless @ARGV;

my ($fh,$edits) = tempfile( 'matcheditXXXXX', DIR => File::Spec->tmpdir );

my @HIT; # context lines
my ($first,$lasthit); # first line in context, line with hit
my $anyhit; # 1 if any hit has been seen

sub process_hit {
    # $HIT[0] is line $first
    # $HIT[$lasthit-$first] is line $lasthit
    # $HIT[$lasthit-$first+$options{context}$ is line $lasthit+$options{context}
    # we have to print the lines from $first to ($lasthit+$options{context}), possibly less if at end of file
    my $lastidx = $lasthit-$first+$options{context};
    $anyhit = 1;
    $lastidx = $#HIT if $lastidx > $#HIT;
    my $last = $first+$lastidx;
    local $, = "\n"; # output field separator
    print $fh "LINES $first-$last", splice( @HIT,0,$lastidx+1 ), "LINESEND\n";
    $lasthit = undef;
    # $first is updated in main program...
}

my $fileheader; # 1 if header for a specific file has been printed

while (<>) {
    chomp;
    if ($.==1) {
        process_hit if $lasthit;
        print $fh "FILEEND\n" if $fileheader;
        @HIT = ();
        $fileheader = 0;
        $first = 1; # first line collected in @HIT will have number 1
    }
    push @HIT, $_; # collect
    if( /$re/ ) {
        $lasthit = $.;
        unless( $fileheader ) {
            print $fh "FILE $ARGV\n";
            $fileheader = 1;
        };
    }
    if( $lasthit ) {
        # running hit
        if( $.-$lasthit > 2*$options{context} ) {
            # we now have 2*$options{context}+1 intervening lines between last hit and current line
            process_hit;
            shift @HIT; # throw away one more, then we still have $options{context} lines of leading context
            $first = $.-$options{context}+1;
        }
    } elsif( @HIT > $options{context} ) {
        # throw one line away
        shift @HIT;
        $first++;
    }
} continue {
    close ARGV if eof; # reset $.
}

process_hit if $lasthit;
print $fh "FILEEND\n" if $fileheader;

close $fh;
unless( $anyhit ) {
    unlink $edits;
    die "!No matching file.\n";
}

my ($at,$mt) = ((stat($edits))[8],(stat($edits))[9]);  # save access and modification times
system( $options{editor}, $edits )==0
    or unlink $edits and die "?Executing `$options{editor} $edits' failed: $? ($!)\n";
unlink $edits and die "Access and modification times of `$edits' unchanged, nothing to do.\n"
    if $at==(stat($edits))[8] and $mt== (stat($edits))[9];

print "Answer YES if you want the changes to take effect: ";
my $choice = <STDIN>;

if( $choice eq "YES\n" ) {
    open( $fh, '<', $edits )
        or die "?Failed to reopen `$edits'\n";
    while( <$fh> ) {
        last unless m/^FILE (.*)/;
        my $fn = $1;
        rename( $fn, "$fn.bak" );
        open( PROCIF, '<', "$fn.bak" );
        open( OF, '>', $fn );
        while( <$fh> ) {
            last unless m/^LINES (\d+)-(\d+)/;
            my $from = $1;
            my $to = $2;
            my $discard = tell PROCIF;    # to initialize $.
            while( $. < $from - 1 ) {    # copy part before
                print OF scalar <PROCIF>;
            }
            while( $. < $to ) {    # dummy read the part
                <PROCIF>;
            }
            while( <$fh> ) {     # paste in new lines
                last if /^LINESEND/;
                print OF $_;
            }
            last if /^FILEEND/;
        }
        # must have read FILEEND on correct file structure
        print OF <PROCIF>;    # copy rest of file

        close PROCIF;
    }
}

close $fh;
unlink $edits;

__END__

=head1 NAME

matchedit - edit regions of files that match a (Perl) regular expression in a single session

=head1 SYNOPSIS

B<matchedit>
[B<--context> I<num>]
[B<--editor> I<editor>]
I<regexp>
I<file>...

=head1 DESCRIPTION

B<matchedit> allows you to edit the regions of the specified files that match the (Perl) regular expression I<regexp>.

=head1 OPTIONS

=over 4

=item B<--context> I<num>, B<-C> I<num>

Print I<num> lines of context before and after each match.
Default is 2.

=item B<--editor> I<editor>

Use I<editor> to edit the matches.
If this option is not given the editor defaults to the one specified with environment variable I<EDITOR> or vim.

=back

=head1 BUGS AND CAVEATS

The markup of the file holding the matches is neither nice nor fool-proof.
This means that your edited section may contain markup that confuses this script.
This is not guarded against (yet), but for each changed file the script
generates a backup copy, so in case of unexpected trouble you may recover.

=head1 COPYRIGHT

(C) 2000-2009 Mark A. Hillebrand <Mark.A.Hillebrand at gmail dot com>.

This code is released under the BSD License.
Before using this software, visit L<http://www.opensource.org/licenses/bsd-license.php> for the full license text.
